(define (compare num1 num2)
  (> (+ num1 10) (* num2 2))
)
(compare 5 5)
(compare 10 10)
(compare 2 6)

(define (power-of-two n)
  (do ((i 0)
       (result 1))
      ((eqv? n i) result)
    (set! result (* result 2))
    (set! i (+ i 1))))
(power-of-two 3)
(power-of-two 0)
(power-of-two 5)
(power-of-two 8)

(define (num-even list)
  (do ((i 0)
       (result 0))
      ((eqv? i (length list)) result)
    (if (even? (list-ref list i)) 
	(set! result (+ result 1)))
    (set! i (+ i 1))
))
)
(num-even  '(1 2 3 4 5))
(num-even  '(5 4 6 8 10 3 1))
(num-even  '())
(num-even '(2 4 6 8 9 10 11 12))

(define (r_gcd a b)
  (cond ((zero? b) a)
	(else (r_gcd b (modulo a b))))
)
(r_gcd 42 56)
(r_gcd 12 18)
(r_gcd 3 5)
(r_gcd 12 60)
(r_gcd 12 90)
(r_gcd 122 1024)

(define (intlist n)
  (do ((i 0)
       (values '()))
      ((eqv? i n) values)
    (set! values (append values (list (+ i 1))))
    (set! i (+ i 1)))
)
(intlist 8)
(intlist 0)
(intlist 5)

(define (is-palindrome seq)
  (cond ((<= (length seq) 1) #t)
	(else (cond ((not (equal? (first seq) (last seq))) #f)
		    (else (is-palindrome (sublist seq 1 (- (length seq) 1)))))))
)
(is-palindrome '(a b a))
(is-palindrome '(a b))
(is-palindrome '(a))
(is-palindrome '())
(is-palindrome '(a b c c b a))
(is-palindrome '(a b c d e f g))

(define (analyze array)
  (do ((i 0)
       (symbols '()))
      ((eqv? i (length array)) symbols)
    (cond ((symbol? (list-ref array i))
	   (set! symbols (append symbols '(ATOM))))
	  (else (set! symbols (append symbols '(LIST)))))
    (set! i (+ i 1)))
)
(analyze '(a b c))
(analyze '(a b (c d) e f))
(analyze '(a))
(analyze '((a)))
(analyze '((a) a a b (c d) e f a b c))

(define (quad-roots a b c)
  (list 
    (/ (- (* b -1) (sqrt (- (expt b 2) (* 4 (* a c))))) (* 2 a))
    (/ (+ (* b -1) (sqrt (- (expt b 2) (* 4 (* a c))))) (* 2 a)))
)
(quad-roots 2 4 -30)
(quad-roots 1 3 -4)
(quad-roots 2 -4 -3)
(quad-roots 1 -2 -2)

(define (r_even_positions array)
  (if (not (zero? (+ (length array) 1)))
      array
      (r_even_positions (sublist array 1 (- (length array) 1))))
)
(r_even_positions '(a b c d e))
(r_even_positions '(a))
(r_even_positions '(a b))
(r_even_positions '())
(r_even_positions '(a b c d e f g))

(define (i_even_positions array)
  (do ((i 0)
       (result '()))
      ((eqv? i (length array)) result)
    (if (even? (+ i 1))
	(set! result (append result (list (list-ref array i)))))
    (set! i (+ i 1)))
)
(i_even_positions '(a b c d e))
(i_even_positions '(a))
(i_even_positions '(a b))
(i_even_positions '())
(i_even_positions '(a b c d e f g))
(i_even_positions '(2 1 2 a b c d f e e e))
